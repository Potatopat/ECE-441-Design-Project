00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.12.29
Created On: 11/30/2017 3:01:26 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      :  Patrick Bartman's Design Project
00000000                             3  * Written by :  Patrick Bartman
00000000                             4  * Date       :  11/30/2017
00000000                             5  * Description:  
00000000                             6  *-----------------------------------------------------------
00001000                             7      ORG    $1000
00001000                             8  START:                  ; first instruction of program
00001000                             9  
00001000                            10  * Put program code here
00001000                            11  
00001000  4280                      12      CLR.L   D0
00001002  4281                      13      CLR.L   D1
00001004  4282                      14      CLR.L   D2
00001006  4283                      15      CLR.L   D3
00001008  4284                      16      CLR.L   D4
0000100A  4285                      17      CLR.L   D5
0000100C  4286                      18      CLR.L   D6
0000100E  4287                      19      CLR.L   D7
00001010                            20      
00001010                            21  * see http://www.easy68k.com/QuickStart/Hello%20World%20Program%203.txt
00001010                            22  
00001010                            23  INIT:
00001010                            24      * Do eception vector table here *
00001010  21FC 00003000 0000        25      MOVE.L #STACK, $0
00001018  21FC 000013D6 0008        26      MOVE.L #BUS_ERR, $8
00001020  21FC 0000184A 000C        27      MOVE.L #ADDR_ERR_STR, $C
00001028  21FC 000013FA 0010        28      MOVE.L #ILL_INST, $10
00001030  21FC 0000140C 0014        29      MOVE.L #DIV_ZERO, $14
00001038                            30      ;MOVE.L #CHK_INST, $18
00001038  21FC 0000141E 0020        31      MOVE.L #PRIV_VIOL, $20
00001040  21FC 00001442 0028        32      MOVE.L #LINE_A, $28
00001048  21FC 00001454 002C        33      MOVE.L #LINE_F, $2C
00001050                            34  
00001050                            35  
00001050                            36  PROMPT:
00001050  43F9 0000156E             37      LEA     MONITOR,A1  ; gives command prompt
00001056  103C 000E                 38      MOVE.B  #14,D0      ; stores result in D0
0000105A  4E4F                      39      TRAP    #15
0000105C                            40      
0000105C                            41  INPUT:
0000105C  43F9 00002100             42      LEA     BUFFER,A1
00001062  103C 0002                 43      MOVE.B  #2,D0       ; trap task 2 does the following:
00001066  4E4F                      44      TRAP    #15         ; read a string from the keyboard into A1 of length stored at D1.W
00001068  B27C 0000                 45      CMP.W   #0,D1       ; compares D1 to the number 0 to see if not empty
0000106C  6700 0330                 46      BEQ     EMPTY       ; branch EMPTY if they are equal
00001070                            47      
00001070                            48  PARSE:
00001070  43F9 00002100             49      LEA     BUFFER,A1
00001076  143C 0020                 50      MOVE.B  #SPACE,D2
0000107A                            51      
0000107A                            52  CLR_SPACE:                ; don't think i need??
0000107A  B411                      53      CMP.B (A1),D2
0000107C  5249                      54      ADD #$01,A1
0000107E  67FA                      55      BEQ CLR_SPACE
00001080                            56      
00001080  7200                      57      MOVEQ   #0,D1
00001082  5349                      58      SUB #$01,A1
00001084                            59      
00001084  45F9 00002200             60      LEA     CMD_BUFFER,A2
0000108A                            61  
0000108A                            62  COPY_CMD:
0000108A  34D9                      63      MOVE    (A1)+,(A2)+
0000108C  5241                      64      ADDI    #1,D1
0000108E  0C41 0008                 65      CMPI    #8,D1
00001092  6C00 0318                 66      BGE     CMD_ERROR
00001096  0C11 0020                 67      CMPI.B  #SPACE,(A1)
0000109A  6700 000C                 68      BEQ     GET_CMD
0000109E  0C11 0000                 69      CMPI.B  #NULL,(A1)
000010A2  6700 0004                 70      BEQ     GET_CMD
000010A6  60E2                      71      BRA     COPY_CMD
000010A8                            72      
000010A8                            73  GET_CMD:
000010A8  14BC 0020                 74      MOVE.B  #SPACE,(A2)
000010AC  43F9 00002200             75      LEA     CMD_BUFFER,A1
000010B2  45F9 0000157B             76      LEA     CMD_TBL,A2
000010B8  47F9 000015C2             77      LEA     CMD_ADDR,A3
000010BE                            78  
000010BE                            79  GET_CMD_LOOP:
000010BE  B509                      80      CMPM.B  (A1)+,(A2)+
000010C0  6600 0014                 81      BNE     NEXT
000010C4  0C11 0020                 82      CMPI.B  #SPACE,(A1)
000010C8  66F4                      83      BNE     GET_CMD_LOOP
000010CA  0C12 0020                 84      CMPI.B  #SPACE,(A2)
000010CE  6600 02DC                 85      BNE     CMD_ERROR
000010D2  2A53                      86      MOVE.L  (A3),A5         ; command found     ; TODO: find out what's in (A5)
000010D4  4ED5                      87      JMP     (A5)            ; run command
000010D6                            88      
000010D6                            89  NEXT:
000010D6  43F9 00002200             90      LEA     CMD_BUFFER,A1
000010DC                            91  
000010DC                            92  NEXT_LOOP:
000010DC  0C1A 0000                 93      CMPI.B  #NULL,(A2)+
000010E0  66FA                      94      BNE     NEXT_LOOP
000010E2  D6FC 0004                 95      ADD     #EOT,A3        ; TODO: don't think I need, but find out
000010E6  B4FC 1785                 96      CMPA    #EXIT_COMP,A2
000010EA  6E00 02C0                 97      BGT     CMD_ERROR
000010EE  4EF8 10BE                 98      JMP     GET_CMD_LOOP
000010F2                            99      
000010F2                           100  GET_ARG:
000010F2  0C15 0024                101      CMPI.B  #HEX,(A5)       ; checks to make sure that has a hex number as address
000010F6                           102      ;BNE     HEX_ERROR
000010F6  3E38 0000                103      MOVE    $0000, D7
000010FA  3C38 0000                104      MOVE    $0000, D6
000010FE                           105      
000010FE                           106  GET_ARG_LOOP:
000010FE  524D                     107      ADD     #$01,A5
00001100  E99F                     108      ROL.L   #4,D7
00001102  DE86                     109      ADD.L   D6,D7
00001104  1C1D                     110      MOVE.B  (A5)+,D6
00001106                           111      ;CMPI.B  #$29,D6         ; check if less than 0
00001106                           112      ;BLE     ARG_ERROR       ; not valid if so
00001106  0C06 0039                113      CMPI.B  #$39,D6         ; if number less than 9
0000110A  6F00 0004                114      BLE     DIGIT           ; easy, continue to next step
0000110E  5F06                     115      SUBQ.B  #$07,D6         ; subtract $7 to make A=$3A, .., F=$3F
00001110                           116      ;CMPI.B  #$3F,D6         ; check if between A and F
00001110                           117      ;BLE     DIGIT           ; valid
00001110                           118      ;BRA     ARG_ERROR       ; can't be valid
00001110                           119      
00001110                           120  DIGIT:
00001110  0406 0030                121      SUB.B   #ZERO,D6
00001114  0C25 0000                122      CMPI.B  #NULL,-(A5)
00001118  6700 0014                123      BEQ     RETURN_ARG
0000111C  0C15 0020                124      CMPI.B  #SPACE,(A5)
00001120  6700 000C                125      BEQ     RETURN_ARG
00001124  0C15 003B                126      CMPI.B  #SEMICOLON,(A5) ; has aditional arg, return to sender and then call arg loop again
00001128  6700 0004                127      BEQ     RETURN_ARG
0000112C  60D0                     128      BRA     GET_ARG_LOOP
0000112E                           129      
0000112E                           130  RETURN_ARG:
0000112E  4E75                     131      RTS
00001130                           132      
00001130                           133  GET_VALUE:
00001130  7E00                     134      MOVEQ   #NULL, D7
00001132  7C00                     135      MOVEQ   #NULL, D6
00001134                           136  ADD_VALUE:
00001134  1C1D                     137      MOVE.B  (A5)+, D6
00001136  0C06 0039                138      CMPI.B  #$39, D6
0000113A  6F00 0004                139      BLE     NUM_VALUE
0000113E  5F06                     140      SUBQ.B  #$07, D6
00001140                           141  NUM_VALUE:
00001140  0406 0030                142      SUB.B   #ZERO, D6
00001144  E99F                     143      ROL.L   #4, D7
00001146  DE86                     144      ADD.L   D6, D7
00001148  5301                     145      SUB.B   #$01, D1
0000114A  0C01 0000                146      CMPI.B  #NULL, D1
0000114E  6F00 0004                147      BLE     RETURN_VALUE
00001152  60E0                     148      BRA     ADD_VALUE
00001154                           149  RETURN_VALUE:
00001154  4E75                     150      RTS
00001156                           151  
00001156                           152      
00001156                           153  
00001156                           154  * PSUEDOCODE:   
00001156                           155  * check if text in ?buffer? is equal to possible commands one by one
00001156                           156  * see http://freesource-codes.blogspot.com/2011/11/string-comparision-in-assembly-language.html
00001156                           157  * will be super long, but entirely copy-paste
00001156                           158  
00001156                           159  
00001156                           160  HELP:
00001156  43F9 000015FA            161      LEA     HELPTEXT,A1 ; load helptext into a1
0000115C  103C 000E                162      MOVE.B  #14,D0      ; display text
00001160  4E4F                     163      TRAP    #15
00001162  6000 0236                164      BRA     RETURN
00001166                           165      
00001166                           166  MDSP:                   ; TODO: Fix
00001166  45F9 00002300            167      LEA     OUTPUT, A2
0000116C  4BF9 00002100            168      LEA     BUFFER, A5
00001172  5A4D                     169      ADD     #$05, A5
00001174  4EB8 10F2                170      JSR     GET_ARG
00001178  2447                     171      MOVE.L  D7, A2
0000117A  524D                     172      ADD     #$01, A5
0000117C  4EB8 10F2                173      JSR     GET_ARG
00001180  2647                     174      MOVE.L  D7, A3
00001182  7200                     175      MOVEQ   #NULL, D1
00001184  43F9 00002100            176      LEA     BUFFER, A1
0000118A                           177      
0000118A                           178  NEW
0000118A  12BC 0000                179      MOVE.B  #$00, (A1)
0000118E  103C 000D                180      MOVE.B  #13, D0
00001192  4E4F                     181      TRAP    #15
00001194  4EB9 000011CE            182      JSR     DISP_ADDR
0000119A  3C3C 0008                183      MOVE.W  #08, D6
0000119E                           184      
0000119E                           185  DISP_MEM
0000119E  143C 0010                186      MOVE.B  #16, D2
000011A2  B6CA                     187      CMPA    A2, A3
000011A4  6700 001A                188      BEQ     END_DISP
000011A8  121A                     189      MOVE.B  (A2)+, D1
000011AA  103C 000F                190      MOVE.B  #15, D0
000011AE  4E4F                     191      TRAP    #15
000011B0  123C 0020                192      MOVE.B  #SPACE, D1
000011B4  103C 0006                193      MOVE.B  #6, D0
000011B8  4E4F                     194      TRAP    #15
000011BA  5346                     195      SUB     #01, D6
000011BC  67CC                     196      BEQ     NEW
000011BE  60DE                     197      BRA     DISP_MEM
000011C0                           198  
000011C0                           199  END_DISP
000011C0  123C 0000                200      MOVE.B  #NULL, D1
000011C4  103C 0000                201      MOVE.B  #0, D0
000011C8  4E4F                     202      TRAP    #15
000011CA  4EF8 1050                203      JMP     PROMPT
000011CE                           204  
000011CE                           205  DISP_ADDR       ;PRINT OUT THE VALUE OF A2 (USEFUL FOR MDSP AND MCHG)
000011CE  123C 0024                206      MOVE.B  #$24, D1
000011D2  303C 0006                207      MOVE    #6, D0
000011D6  4E4F                     208      TRAP    #15
000011D8  200A                     209      MOVE.L  A2, D0
000011DA  43F9 00002300            210      LEA     OUTPUT, A1
000011E0  343C 0008                211      MOVE.W  #8, D2
000011E4                           212  DSP_ADR_LP
000011E4  E998                     213      ROL.L   #4, D0
000011E6  2600                     214      MOVE.L  D0, D3
000011E8  C6BC 0000000F            215      AND.L   #$0F, D3
000011EE  0C03 0009                216      CMPI.B  #$09, D3
000011F2  6F00 0004                217      BLE     LESS_ADDR
000011F6  5E43                     218      ADD     #$07, D3
000011F8                           219  LESS_ADDR
000011F8  0643 0030                220      ADD     #$30, D3
000011FC  12C3                     221      MOVE.B  D3, (A1)+
000011FE  5342                     222      SUBQ.W  #1, D2
00001200  66E2                     223      BNE     DSP_ADR_LP
00001202                           224      
00001202  12FC 0000                225      MOVE.B  #NULL, (A1)+
00001206  43F9 00002300            226      LEA     OUTPUT, A1
0000120C  103C 000E                227      MOVE.B  #14, D0
00001210  4E4F                     228      TRAP #15
00001212  123C 003A                229      MOVE.B  #$3A, D1
00001216  103C 0006                230      MOVE.B  #6, D0
0000121A  4E4F                     231      TRAP    #15
0000121C  4E75                     232      RTS
0000121E                           233  
0000121E                           234  
0000121E                           235  SORTW:
0000121E                           236  
0000121E                           237  MM:
0000121E  4BF8 105C                238      LEA     INPUT,A5
00001222  564D                     239      ADD     #$03,A5
00001224  4EB8 10F2                240      JSR     GET_ARG
00001228  2447                     241      MOVE.L  D7,A2
0000122A                           242  MOD_LOOP:
0000122A  43F9 00002300            243      LEA     OUTPUT, A1
00001230                           244      
00001230  4EB8 11CE                245      JSR     DISP_ADDR
00001234                           246  
00001234  103C 0002                247      MOVE.B  #2,D0
00001238  4E4F                     248      TRAP    #15
0000123A  43F9 00002300            249      LEA     OUTPUT, A1
00001240  0C11 002E                250      CMPI.B  #$2E,(A1)
00001244  6700 0014                251      BEQ     DONE_MOD
00001248  0C01 0002                252      CMPI.B  #2,D1
0000124C                           253      ;BNE        ARG_ERR
0000124C  4BF9 00002300            254      LEA     OUTPUT, A5
00001252  4EB8 1130                255      JSR     GET_VALUE
00001256  14C7                     256      MOVE.B  D7,(A2)+
00001258  60D0                     257      BRA     MOD_LOOP
0000125A                           258  
0000125A                           259  DONE_MOD:
0000125A  6000 013E                260      BRA     RETURN
0000125E                           261  
0000125E                           262  MS:
0000125E                           263  
0000125E                           264  BF:
0000125E  4BF9 00002100            265      LEA     BUFFER, A5
00001264  564D                     266      ADD     #$03, A5
00001266  4EB8 10F2                267      JSR     GET_ARG
0000126A  2447                     268      MOVE.L  D7, A2
0000126C  524D                     269      ADD     #$01, A5
0000126E  4EB8 10F2                270      JSR     GET_ARG
00001272  2647                     271      MOVE.L  D7, A3
00001274  7200                     272      MOVEQ   #00, D1
00001276  2C4D                     273      MOVE.L  A5, A6
00001278  524E                     274      ADD     #01, A6
0000127A                           275      
0000127A                           276  GET_LENGTH:
0000127A  5241                     277      ADD     #01, D1
0000127C  0C1E 0000                278      CMPI.B  #NULL, (A6)+
00001280  66F8                     279      BNE     GET_LENGTH
00001282  0C01 0005                280      CMPI.B  #05, D1
00001286                           281      ;BNE        ARG_ERR        
00001286  4EB8 1130                282      JSR     GET_VALUE    ;D7 NOW STORES THE WORD WE WANT TO FILL
0000128A                           283      
0000128A                           284  FILL_MEM:
0000128A  B4CB                     285      CMPA    A3, A2
0000128C  6C00 0006                286      BGE     DONE_FILL
00001290  34C7                     287      MOVE.W  D7, (A2)+
00001292  60F6                     288      BRA     FILL_MEM
00001294                           289  
00001294                           290  DONE_FILL:
00001294  123C 0000                291      MOVE.B  #NULL, D1
00001298  103C 0000                292      MOVE.B  #0, D0
0000129C  4E4F                     293      TRAP    #15
0000129E  4EF8 1050                294      JMP     PROMPT
000012A2                           295  
000012A2                           296  BMOV:
000012A2  4BF9 00002100            297      LEA     BUFFER,A5
000012A8  5A4D                     298      ADD     #05,A5
000012AA  4EB8 10F2                299      JSR     GET_ARG
000012AE  2447                     300      MOVE.L  D7,A2
000012B0  524D                     301      ADD     #01,A5
000012B2  4EB8 10F2                302      JSR     GET_ARG
000012B6  2647                     303      MOVE.L  D7,A3
000012B8  524D                     304      ADD     #01,A5
000012BA  4EB8 10F2                305      JSR     GET_ARG
000012BE  2847                     306      MOVE.L  D7,A4
000012C0                           307  MOVE_MEM:
000012C0  B4CB                     308      CMPA    A3,A2
000012C2  6C00 0006                309      BGE     DONE_MOVE
000012C6  38DA                     310      MOVE.W  (A2)+,(A4)+
000012C8  60F6                     311      BRA     MOVE_MEM
000012CA                           312      
000012CA                           313  DONE_MOVE
000012CA  123C 0000                314      MOVE.B  #NULL,D1
000012CE  103C 0000                315      MOVE.B  #0,D0
000012D2  4E4F                     316      TRAP    #15
000012D4  4EF9 0000139A            317      JMP     RETURN
000012DA                           318  
000012DA                           319  
000012DA                           320  BTST:
000012DA  45F9 00002300            321      LEA     OUTPUT, A2
000012E0  4BF9 00002100            322      LEA     BUFFER, A5
000012E6  5A4D                     323      ADD     #$05, A5
000012E8  4EB8 10F2                324      JSR     GET_ARG
000012EC  2447                     325      MOVE.L  D7, A2
000012EE  524D                     326      ADD     #$01, A5
000012F0  4EB8 10F2                327      JSR     GET_ARG
000012F4  2647                     328      MOVE.L  D7, A3
000012F6  2A4A                     329      MOVE.L  A2, A5      ;STORE COPY OF START LOCATION
000012F8                           330  WRITE_TEST
000012F8  B6CA                     331      CMPA    A2, A3
000012FA  6D00 0008                332      BLT     DONE_WRITE
000012FE  34FC A5A5                333      MOVE.W  #$A5A5, (A2)+
00001302  60F4                     334      BRA     WRITE_TEST
00001304                           335  DONE_WRITE
00001304  244D                     336      MOVE.L  A5, A2
00001306                           337  READ_TEST
00001306  0C52 A5A5                338      CMP.W   #$A5A5, (A2)
0000130A  6600 002E                339      BNE     MEM_ERR
0000130E  34FC 5A5A                340      MOVE.W  #$5A5A, (A2)+
00001312  B6CA                     341      CMPA    A2, A3
00001314  6EF0                     342      BGT     READ_TEST
00001316                           343      
00001316  244D                     344      MOVE.L  A5, A2
00001318                           345  FINAL_TEST
00001318  0C52 5A5A                346      CMP.W   #$5A5A, (A2)
0000131C  6600 001C                347      BNE     MEM_ERR
00001320  34FC 0000                348      MOVE.W  #$0000, (A2)+
00001324  B6CA                     349      CMPA    A2, A3
00001326  6EF0                     350      BGT     FINAL_TEST
00001328                           351      
00001328  43F9 000018E8            352      LEA     GOOD, A1
0000132E  103C 000E                353      MOVE.B  #14, D0
00001332  4E4F                     354      TRAP    #15
00001334                           355  
00001334                           356      
00001334  4EF9 0000139A            357      JMP     RETURN
0000133A                           358  
0000133A                           359  MEM_ERR
0000133A  43F9 000018CF            360      LEA     MEM_ERR_STR, A1
00001340  103C 000D                361      MOVE.B  #13, D0
00001344  4E4F                     362      TRAP    #15
00001346  4EF9 0000139A            363      JMP     RETURN
0000134C                           364  
0000134C                           365  BSCH:
0000134C                           366  
0000134C                           367  GO:
0000134C                           368      * TODO: load branching address into A7 during string parsing
0000134C                           369      * TODO: make sure it is valid memory address via BGE, BLE, etc.
0000134C                           370      
0000134C  4BF9 00002100            371      LEA     BUFFER,A5
00001352  564D                     372      ADD     #$03,A5       ; why #$03 (End-Of-Text)
00001354  4EB8 10F2                373      JSR     GET_ARG
00001358  43F9 00002300            374      LEA     OUTPUT,A1
0000135E  2247                     375      MOVE.L  D7,A1       ; moves GO's arg into A7
00001360  4ED1                     376      JMP     (A1)        ; branch to location to run that program
00001362  6000 0036                377      BRA     RETURN
00001366                           378      
00001366                           379  DF:
00001366  4EB9 00001466            380      JSR     REG
0000136C                           381      
0000136C  6000 002C                382      BRA     RETURN
00001370                           383      
00001370                           384      
00001370                           385  RESET:
00001370  247C 00000000            386      MOVE.L  #NULL,A2
00001376  267C 00000FFF            387      MOVE.L  #$00000FFF,A3
0000137C  7EFF                     388      MOVE.L  #$FFFFFFFF,D7
0000137E                           389      
0000137E  4EF8 128A                390      JMP     FILL_MEM
00001382                           391      
00001382  247C 00002000            392      MOVE.L  #$2000,A2
00001388  267C 00003000            393      MOVE.L  #$3000,A3
0000138E                           394      
0000138E  4EF8 128A                395      JMP     FILL_MEM
00001392                           396      
00001392  6000 0006                397      BRA     RETURN
00001396                           398  
00001396                           399  EXIT:
00001396  6000 0038                400      BRA     DONE
0000139A                           401      
0000139A                           402  RETURN:
0000139A                           403      ;MOVE.B  #14,D0      ; go back to monitor
0000139A                           404      ;TRAP    #15
0000139A  6000 FCB4                405      BRA     PROMPT
0000139E                           406  
0000139E                           407  EMPTY:
0000139E  43F9 0000178D            408      LEA     EMPTY_STR,A1    ; loads EMPTY_STR into A1
000013A4  103C 000E                409      MOVE.B  #14,D0          ; display text
000013A8  4E4F                     410      TRAP    #15
000013AA  60EE                     411      BRA     RETURN
000013AC                           412      
000013AC                           413  CMD_ERROR:
000013AC  4EB9 000013FA            414      JSR     ILL_INST
000013B2                           415      ;LEA     CMD_ERR_STR,A1  ; loads CMD_ERR_STR into A1
000013B2                           416      ;MOVE.B #14,D0          ; display text
000013B2                           417      ;TRAP   #15
000013B2  60E6                     418      BRA     RETURN
000013B4                           419      
000013B4                           420  HEX_ERROR:
000013B4  43F9 000017B1            421      LEA     HEX_ERR_STR,A1  ; loads HEX_ERR_STR into A1
000013BA  103C 000E                422      MOVE.B  #14,D0          ; display text
000013BE  4E4F                     423      TRAP    #15
000013C0  60D8                     424      BRA     RETURN
000013C2                           425      
000013C2                           426  ARG_ERROR:
000013C2  43F9 000017E6            427      LEA     ARG_ERR_STR,A1  ; loads ARG_ERR_STR into A1
000013C8  103C 000E                428      MOVE.B  #14,D0          ; display text
000013CC  4E4F                     429      TRAP    #15
000013CE  60CA                     430      BRA     RETURN
000013D0                           431  
000013D0                           432  DONE:
000013D0  103C 0009                433      MOVE.B  #9,D0
000013D4  4E4F                     434      TRAP    #15         ; halt simulator
000013D6                           435      
000013D6                           436      
000013D6                           437      
000013D6                           438  BUS_ERR:
000013D6  43F9 0000183E            439      LEA     BUS_ERR_STR, A1
000013DC  103C 000D                440      MOVE.B  #13, D0
000013E0  4E4F                     441      TRAP    #15
000013E2  4EF9 00001466            442      JMP     REG
000013E8                           443  
000013E8                           444  ADDR_ERR:
000013E8  43F9 0000184A            445      LEA     ADDR_ERR_STR, A1
000013EE  103C 000D                446      MOVE.B  #13, D0
000013F2  4E4F                     447      TRAP    #15
000013F4  4EF9 00001466            448      JMP     REG
000013FA                           449  
000013FA                           450  ILL_INST:
000013FA  43F9 0000185A            451      LEA     ILL_INST_STR, A1
00001400  103C 000D                452      MOVE.B  #13, D0
00001404  4E4F                     453      TRAP    #15
00001406  4EF9 00001466            454      JMP     REG
0000140C                           455  
0000140C                           456  DIV_ZERO:
0000140C  43F9 00001872            457      LEA     DIV0_ERR_STR, A1
00001412  103C 000D                458      MOVE.B  #13, D0
00001416  4E4F                     459      TRAP    #15
00001418  4EF9 00001466            460      JMP     REG
0000141E                           461  
0000141E                           462  PRIV_VIOL:
0000141E  43F9 00001889            463      LEA     PRIV_VIOL_STR, A1
00001424  103C 000D                464      MOVE.B  #13, D0
00001428  4E4F                     465      TRAP    #15
0000142A  4EF9 00001466            466      JMP     REG
00001430                           467  
00001430                           468  TRACE:
00001430  43F9 0000189D            469      LEA     TRACE_STR,A1
00001436  103C 000D                470      MOVE.B  #13,D0
0000143A  4E4F                     471      TRAP    #15
0000143C  4EF9 00001466            472      JMP     REG
00001442                           473  
00001442                           474  LINE_A:
00001442  43F9 000018AD            475      LEA     LINE_A_STR,A1
00001448  103C 000D                476      MOVE.B  #13,D0
0000144C  4E4F                     477      TRAP    #15
0000144E  4EF9 00001466            478      JMP     REG
00001454                           479  
00001454                           480  LINE_F:
00001454  43F9 000018BE            481      LEA     LINE_F_STR,A1
0000145A  103C 000D                482      MOVE.B  #13,D0
0000145E  4E4F                     483      TRAP    #15
00001460  4EF9 00001466            484      JMP     REG
00001466                           485      
00001466                           486  REG:
00001466  4FF9 00003000            487      LEA     STACK,A7
0000146C  48E7 FFFF                488      MOVEM.L D0-D7/A0-A7,-(A7)
00001470  7A00                     489      MOVEQ   #00,D5
00001472                           490      
00001472                           491  NXT_REG:
00001472  43F9 0000180E            492      LEA     RGSTR_STR,A1
00001478  D2C5                     493      ADD     D5,A1
0000147A  5645                     494      ADD     #$03,D5
0000147C  323C 0003                495      MOVE.W  #03,D1
00001480  103C 0001                496      MOVE.B  #01,D0
00001484  4E4F                     497      TRAP    #15
00001486  43F9 00002300            498      LEA     OUTPUT,A1
0000148C  343C 0008                499      MOVE.W  #8, D2
00001490  201F                     500      MOVE.L  (A7)+,D0
00001492                           501      
00001492                           502  NXT_DIG:
00001492  E998                     503      ROL.L   #4,D0
00001494  2600                     504      MOVE.L  D0,D3
00001496  C6BC 0000000F            505      AND.L   #$0F,D3
0000149C  0C03 0009                506      CMPI.B  #$09,D3
000014A0  6F00 0004                507      BLE     LESS
000014A4  5E43                     508      ADD     #$07,D3
000014A6                           509  LESS:
000014A6  0643 0030                510      ADD     #$30,D3
000014AA  12C3                     511      MOVE.B  D3,(A1)+
000014AC  5342                     512      SUBQ.W  #1,D2
000014AE  66E2                     513      BNE     NXT_DIG
000014B0                           514      
000014B0  12FC 0000                515      MOVE.B  #$00,(A1)+
000014B4  43F9 00002300            516      LEA     OUTPUT,A1
000014BA  103C 000D                517      MOVE.B  #13,D0
000014BE  4E4F                     518      TRAP    #15
000014C0  BEFC 3000                519      CMPA    #STACK,A7
000014C4  6DAC                     520      BLT     NXT_REG   
000014C6                           521      
000014C6                           522  SR:
000014C6  4FF9 00003000            523      LEA     STACK,A7
000014CC  40E7                     524      MOVE    SR,-(A7)
000014CE  43F9 000018E4            525      LEA     SR_STR,A1
000014D4  103C 000E                526      MOVE.B  #14,D0
000014D8  4E4F                     527      TRAP    #15
000014DA  43F9 00002300            528      LEA     OUTPUT,A1
000014E0  343C 0004                529      MOVE.W  #4,D2
000014E4  201F                     530      MOVE.L  (A7)+,D0
000014E6                           531  NXT_SR:
000014E6  E998                     532      ROL.L   #4,D0
000014E8  2600                     533      MOVE.L  D0,D3
000014EA  C6BC 0000000F            534      AND.L   #$0F,D3
000014F0  0C03 0009                535      CMPI.B  #$09,D3
000014F4  6F00 0004                536      BLE     LESS_SR
000014F8  5E43                     537      ADD     #$07,D3
000014FA                           538  LESS_SR:
000014FA  0643 0030                539      ADD     #$30,D3
000014FE  12C3                     540      MOVE.B  D3,(A1)+
00001500  5342                     541      SUBQ.W  #1,D2
00001502  66E2                     542      BNE     NXT_SR
00001504  12FC 0000                543      MOVE.B  #$00,(A1)+
00001508  43F9 00002300            544      LEA     OUTPUT,A1
0000150E  103C 000D                545      MOVE.B  #13,D0
00001512  4E4F                     546      TRAP    #15
00001514  4EF8 1050                547      JMP     PROMPT
00001518                           548  
00001518                           549  
00001518                           550  SWAP:
00001518  4BF8 105C                551      LEA     INPUT,A5
0000151C  5A4D                     552      ADD     #05,A5
0000151E  4EB8 10F2                553      JSR     GET_ARG
00001522  2447                     554      MOVE.L  D7,A2
00001524  524D                     555      ADD     #01,A5
00001526  4EB8 10F2                556      JSR     GET_ARG
0000152A  2647                     557      MOVE.L  D7,A3
0000152C  524D                     558      ADD     #01,A5
0000152E  0C15 0042                559      CMPI.B  #$42,(A5)       ; if has 'B' for byte
00001532  6700 0018                560      BEQ     SWAP_BYTE
00001536  0C15 0057                561      CMPI.B  #$57,(A5)       ; if has 'W' for word
0000153A  6700 001A                562      BEQ     SWAP_WORd
0000153E  0C15 004C                563      CMPI.B  #$4C,(A5)       ; if has 'L' for long
00001542  6700 001C                564      BEQ     SWAP_LONG
00001546  4EF9 000017E6            565      JMP     ARG_ERR_STR
0000154C                           566      
0000154C                           567  SWAP_BYTE:
0000154C  1212                     568      MOVE.B  (A2),D1
0000154E  1493                     569      MOVE.B  (A3),(A2)
00001550  1681                     570      MOVE.B  D1,(A3)
00001552  6000 FE46                571      BRA     RETURN
00001556                           572  SWAP_WORD:
00001556  3212                     573      MOVE.W  (A2),D1
00001558  3493                     574      MOVE.W  (A3),(A2)
0000155A  3681                     575      MOVE.W  D1,(A3)
0000155C  6000 FE3C                576      BRA     RETURN
00001560                           577  SWAP_LONG:
00001560  2212                     578      MOVE.L  (A2),D1
00001562  2493                     579      MOVE.L  (A3),(A2)
00001564  2681                     580      MOVE.L  D1,(A3)
00001566  6000 FE32                581      BRA     RETURN
0000156A                           582  
0000156A                           583  
0000156A                           584      
0000156A                           585      
0000156A                           586  
0000156A  FFFF FFFF                587      SIMHALT             ; halt simulator
0000156E                           588  
0000156E                           589  * Put variables and constants here
0000156E                           590  
0000156E= 4D 4F 4E 49 54 4F ...    591  MONITOR     DC.B    'MONITOR441> ',0                        ; command prompt input message
0000157B  =00002100                592  BUFFER      EQU     $2100                                   ; input string storage
0000157B  =00002200                593  CMD_BUFFER  EQU     $2200
0000157B  =00002300                594  OUTPUT      EQU     $2300
0000157B  =0000000D                595  CR          EQU     $0D                                     ; ascii code for carriage return
0000157B  =0000000A                596  LF          EQU     $0A                                     ; ascii code for line feed
0000157B= 48 45 4C 50 20 00        597  CMD_TBL     DC.B    'HELP ',0
00001581= 4D 44 53 50 20 00        598              DC.B    'MDSP ',0
00001587= 53 4F 52 54 57 20 00     599              DC.B    'SORTW ',0
0000158E= 53 57 41 50 20 00        600              DC.B    'SWAP ',0
00001594= 4D 4D 20 00              601              DC.B    'MM ',0
00001598= 4D 53 20 00              602              DC.B    'MS ',0
0000159C= 42 46 20 00              603              DC.B    'BF ',0
000015A0= 42 4D 4F 56 20 00        604              DC.B    'BMOV ',0
000015A6= 42 54 53 54 20 00        605              DC.B    'BTST ',0
000015AC= 42 53 43 48 20 00        606              DC.B    'BSCH ',0
000015B2= 47 4F 20 00              607              DC.B    'GO ',0
000015B6= 44 46 20 00              608              DC.B    'DF ',0
000015BA= 52 45 53 45 54 20 00     609              DC.B    'RESET ',0
000015C2= 00001156                 610  CMD_ADDR    DC.L    HELP
000015C6= 00001166                 611              DC.L    MDSP
000015CA= 0000121E                 612              DC.L    SORTW
000015CE= 00001518                 613              DC.L    SWAP
000015D2= 0000121E                 614              DC.L    MM
000015D6= 0000125E                 615              DC.L    MS
000015DA= 0000125E                 616              DC.L    BF
000015DE= 000012A2                 617              DC.L    BMOV
000015E2= 000012DA                 618              DC.L    BTST
000015E6= 0000134C                 619              DC.L    BSCH
000015EA= 0000134C                 620              DC.L    GO
000015EE= 00001366                 621              DC.L    DF
000015F2= 00001370                 622              DC.L    RESET
000015F6= 00001396                 623              DC.L    EXIT
000015FA= 4D 44 53 50 09 20 ...    624  HELPTEXT    DC.B    'MDSP      Memory Display',CR,LF        ; ascii string with new line
00001612= 53 4F 52 54 57 20 ...    625              DC.B    'SORTW       Sort',CR,LF
00001624= 4D 4D 09 09 4D 65 ...    626              DC.B    'MM     Memory Modify',CR,LF
00001637= 4D 53 09 09 4D 65 ...    627              DC.B    'MS     Memory Set',CR,LF
00001647= 42 46 09 09 42 6C ...    628              DC.B    'BF     Block Fill (BF $START $END ####)',CR,LF
0000166D= 42 4D 4F 56 09 20 ...    629              DC.B    'BMOV      Block Move',CR,LF
00001681= 42 53 43 48 09 20 ...    630              DC.B    'BSCH      Block Test',CR,LF
00001695= 47 4F 09 09 45 78 ...    631              DC.B    'GO     Execute Program (GO $ADDRESS)',CR,LF
000016B8= 44 46 09 09 44 69 ...    632              DC.B    'DF     Display Formatted Registers',CR,LF
000016D9= 53 57 41 50 09 20 ...    633              DC.B    'SWAP      Swap the data of two registers with length (SWAP $ONE $TWO;B/W/L)',CR,LF
00001724= 52 45 53 45 54 20 ...    634              DC.B    'RESET      Clears nonoperative registers to origional state',CR,LF
00001761= 45 58 49 54 09 20 ...    635              DC.B    'EXIT      Exit Monitor Program',CR,LF
0000177F= 00                       636              DC.B    '',0
00001780= 48 45 4C 50 00           637  HELP_COMP   DC.B    'HELP',0
00001785= 45 58 49 54 00           638  EXIT_COMP   DC.B    'EXIT',0
0000178A= 3F 20 00                 639  Q_MARK      DC.B    '? ',0
0000178D= 59 4F 55 20 48 41 ...    640  EMPTY_STR   DC.B    'YOU HAD AN EMPTY STRING',0
000017A5= 4E 4F 54 20 56 41 ...    641  CMD_ERR_STR DC.B    'NOT VALID',CR,LF
000017B0= 00                       642              DC.B    '',0
000017B1= 4E 45 45 44 53 20 ...    643  HEX_ERR_STR DC.B    'NEEDS TO BE A HEXADECIMAL NUMBER. BEGIN ARG WITH "$"',0
000017E6= 41 52 47 55 4D 45 ...    644  ARG_ERR_STR DC.B    'ARGUMENT ERROR. LIKELY A NON HEX NUMBER',0
0000180E  =00000020                645  SPACE       EQU     $20
0000180E  =00000000                646  NULL        EQU     $00
0000180E  =00000004                647  EOT         EQU     $04
0000180E  =00000024                648  HEX         EQU     $24
0000180E  =00000030                649  ZERO        EQU     $30
0000180E  =0000003B                650  SEMICOLON   EQU     $3B
0000180E  =00003000                651  STACK       EQU     $3000
0000180E= 44 30 3D 44 31 3D ...    652  RGSTR_STR   DC.B    'D0=D1=D2=D3=D4=D5=D6=D7=A0=A1=A2=A3=A4=A5=A6=A7='
0000183E= 42 55 53 20 45 52 ...    653  BUS_ERR_STR DC.B    'BUS ERROR',$0A,$0D,0
0000184A                           654  ADDR_ERR_STR
0000184A= 41 44 44 52 45 53 ...    655              DC.B    'ADDRESS ERROR',LF,CR,0    
0000185A                           656  ILL_INST_STR
0000185A= 4E 4F 54 20 56 41 ...    657              DC.B    'NOT VALID INSTRUCTION',LF,CR,0
00001872                           658  DIV0_ERR_STR
00001872= 44 49 56 49 44 45 ...    659              DC.B    'DIVIDE BY ZERO ERROR',LF,CR,0
00001889                           660  PRIV_VIOL_STR
00001889= 50 52 49 56 49 4C ...    661              DC.B    'PRIVILEGE VIOLATION',0
0000189D= 54 52 41 43 45 20 ...    662  TRACE_STR   DC.B    'TRACE EXCEPTION',0
000018AD= 4C 49 4E 45 20 41 ...    663  LINE_A_STR  DC.B    'LINE A EXCEPTION',0
000018BE= 4C 49 4E 45 20 46 ...    664  LINE_F_STR  DC.B    'LINE F EXCEPTION',0
000018CF= 45 52 52 4F 52 20 ...    665  MEM_ERR_STR DC.B    'ERROR IN MEMORY AT: ',0
000018E4= 53 52 3D 00              666  SR_STR      DC.B    'SR=',0
000018E8= 4E 4F 20 45 52 52 ...    667  GOOD        DC.B    'NO ERROR DETECTED',LF,CR,0
000018FC                           668  
000018FC                           669      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ADDR_ERR            13E8
ADDR_ERR_STR        184A
ADD_VALUE           1134
ARG_ERROR           13C2
ARG_ERR_STR         17E6
BF                  125E
BMOV                12A2
BSCH                134C
BTST                12DA
BUFFER              2100
BUS_ERR             13D6
BUS_ERR_STR         183E
CLR_SPACE           107A
CMD_ADDR            15C2
CMD_BUFFER          2200
CMD_ERROR           13AC
CMD_ERR_STR         17A5
CMD_TBL             157B
COPY_CMD            108A
CR                  D
DF                  1366
DIGIT               1110
DISP_ADDR           11CE
DISP_MEM            119E
DIV0_ERR_STR        1872
DIV_ZERO            140C
DONE                13D0
DONE_FILL           1294
DONE_MOD            125A
DONE_MOVE           12CA
DONE_WRITE          1304
DSP_ADR_LP          11E4
EMPTY               139E
EMPTY_STR           178D
END_DISP            11C0
EOT                 4
EXIT                1396
EXIT_COMP           1785
FILL_MEM            128A
FINAL_TEST          1318
GET_ARG             10F2
GET_ARG_LOOP        10FE
GET_CMD             10A8
GET_CMD_LOOP        10BE
GET_LENGTH          127A
GET_VALUE           1130
GO                  134C
GOOD                18E8
HELP                1156
HELPTEXT            15FA
HELP_COMP           1780
HEX                 24
HEX_ERROR           13B4
HEX_ERR_STR         17B1
ILL_INST            13FA
ILL_INST_STR        185A
INIT                1010
INPUT               105C
LESS                14A6
LESS_ADDR           11F8
LESS_SR             14FA
LF                  A
LINE_A              1442
LINE_A_STR          18AD
LINE_F              1454
LINE_F_STR          18BE
MDSP                1166
MEM_ERR             133A
MEM_ERR_STR         18CF
MM                  121E
MOD_LOOP            122A
MONITOR             156E
MOVE_MEM            12C0
MS                  125E
NEW                 118A
NEXT                10D6
NEXT_LOOP           10DC
NULL                0
NUM_VALUE           1140
NXT_DIG             1492
NXT_REG             1472
NXT_SR              14E6
OUTPUT              2300
PARSE               1070
PRIV_VIOL           141E
PRIV_VIOL_STR       1889
PROMPT              1050
Q_MARK              178A
READ_TEST           1306
REG                 1466
RESET               1370
RETURN              139A
RETURN_ARG          112E
RETURN_VALUE        1154
RGSTR_STR           180E
SEMICOLON           3B
SORTW               121E
SPACE               20
SR                  14C6
SR_STR              18E4
STACK               3000
START               1000
SWAP                1518
SWAP_BYTE           154C
SWAP_LONG           1560
SWAP_WORD           1556
TRACE               1430
TRACE_STR           189D
WRITE_TEST          12F8
ZERO                30
